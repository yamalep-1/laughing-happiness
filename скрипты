const API_ROOT_URL = 'http://127.0.0.1:8000';
const API_NOTES_URL = `${API_ROOT_URL}/api/notes/`;

let authToken = localStorage.getItem('authToken');

const noteInput = document.getElementById('noteInput');
const addNoteBtn = document.getElementById('addNoteBtn');
const notesContainer = document.getElementById('notesContainer');
const userIdDisplay = document.getElementById('userIdDisplay').querySelector('span');

const messageModal = document.getElementById('messageModal');
const modalTitle = document.getElementById('modalTitle');
const modalMessage = document.getElementById('modalMessage');
const modalConfirmBtn = document.getElementById('modalConfirmBtn');
const modalCancelBtn = document.getElementById('modalCancelBtn');
const modalCloseBtn = document.getElementById('modalCloseBtn');

function showModal(title, message, isConfirm = false) {
    return new Promise((resolve) => {
        modalTitle.textContent = title;
        modalMessage.textContent = message;

        modalConfirmBtn.classList.add('hidden');
        modalCancelBtn.classList.add('hidden');
        modalCloseBtn.classList.add('hidden');

        if (isConfirm) {
            modalConfirmBtn.textContent = 'ОК';
            modalConfirmBtn.classList.remove('hidden');
            modalCancelBtn.classList.remove('hidden');
            modalConfirmBtn.onclick = () => {
                messageModal.classList.add('hidden');
                resolve(true);
            };
            modalCancelBtn.onclick = () => {
                messageModal.classList.add('hidden');
                resolve(false);
            };
        } else {
            modalCloseBtn.textContent = 'Закрыть';
            modalCloseBtn.classList.remove('hidden');
            modalCloseBtn.onclick = () => {
                messageModal.classList.add('hidden');
                resolve(true);
            };
        }
        messageModal.classList.remove('hidden');
    });
}

function getAuthHeaders() {
    if (!authToken) {
        return {};
    }
    return {
        'Content-Type': 'application/json',
        'Authorization': `Token ${authToken}`
    };
}

// ----------------------------------------------------
// НОВАЯ ЛОГИКА АУТЕНТИФИКАЦИИ
// ----------------------------------------------------

async function authenticateUser() {
    if (authToken) {
        // Если токен уже есть, пробуем загрузить заметки
        await loadNotes();
        return;
    }

    const username = prompt('Введите имя пользователя (должно быть создано в Django Admin):');
    const password = prompt('Введите пароль:');
    
    if (!username || !password) {
        showModal('Ошибка входа', 'Для продолжения необходимо ввести логин и пароль.');
        return;
    }

    try {
        const response = await fetch(`${API_ROOT_URL}/auth/token/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
        });

        if (response.ok) {
            const data = await response.json();
            authToken = data.token;
            localStorage.setItem('authToken', authToken);
            userIdDisplay.textContent = username; // Используем имя пользователя для отображения
            showModal('Успешный вход', `Вы вошли как ${username}. Заметки загружаются.`);
            await loadNotes();
        } else {
            throw new Error('Неверный логин или пароль');
        }

    } catch (error) {
        console.error("Ошибка аутентификации:", error);
        showModal('Ошибка входа', 'Не удалось войти. Убедитесь, что логин и пароль верны и вы создали пользователя в Django Admin.');
        // Сброс токена и повторная попытка
        authToken = null;
        localStorage.removeItem('authToken');
        userIdDisplay.textContent = 'Не выполнен';
        notesContainer.innerHTML = '<p class="text-center text-red-500 py-4">Требуется вход в систему. Обновите страницу и введите данные.</p>';
    }
}

// ----------------------------------------------------
// API-ФУНКЦИИ (Обновлены для использования Токена)
// ----------------------------------------------------

async function loadNotes() {
    if (!authToken) {
        notesContainer.innerHTML = '<p class="text-center text-red-500 py-4">Необходимо войти в систему для загрузки заметок.</p>';
        return;
    }
    try {
        notesContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Загрузка заметок...</p>';
        const response = await fetch(API_NOTES_URL, {
            headers: getAuthHeaders()
        });
        if (!response.ok) {
            // Если токен недействителен, запрашиваем повторный вход
            if (response.status === 401) {
                authToken = null;
                localStorage.removeItem('authToken');
                return authenticateUser();
            }
            throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        const notes = await response.json();
        renderNotes(notes);
    } catch (error) {
        console.error("Ошибка при загрузке заметок:", error);
        notesContainer.innerHTML = '<p class="text-center text-red-500 py-4">Ошибка загрузки заметок. Проверьте, запущен ли Django-сервер.</p>';
        showModal('Ошибка', 'Не удалось загрузить заметки. Проверьте, запущен ли Django-сервер.');
    }
}

function renderNotes(notes) {
    notesContainer.innerHTML = '';

    if (notes.length === 0) {
        notesContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Здесь пока тихо... Добавьте свою первую заметку!</p>';
        return;
    }

    notes.forEach(note => {
        const noteElement = document.createElement('div');
        noteElement.classList.add(
            'note-item',
            'bg-gray-50',
            'p-4',
            'rounded-lg',
            'shadow-sm',
            'flex',
            'flex-col',
            'border',
            'border-gray-200'
        );
        noteElement.dataset.id = note.id;

        const noteTextElement = document.createElement('p');
        noteTextElement.classList.add('note-text', 'text-gray-700', 'flex-grow', 'mb-3', 'cursor-pointer');
        noteTextElement.textContent = note.content;

        const noteUserIdElement = document.createElement('span');
        noteUserIdElement.classList.add('text-xs', 'text-gray-500', 'mt-1', 'text-left');
        noteUserIdElement.textContent = `От пользователя ID: ${note.user}`; // Отображаем ID пользователя из Django

        const noteDateElement = document.createElement('span');
        noteDateElement.classList.add('text-xs', 'text-gray-400', 'mt-2', 'text-right');
        noteDateElement.textContent = note.created_at ? new Date(note.created_at).toLocaleString() : 'Дата неизвестна';

        // Отображение дополнительной информации (для демонстрации связей)
        const detailsElement = document.createElement('div');
        detailsElement.classList.add('text-xs', 'mt-2', 'p-2', 'bg-blue-100', 'rounded');
        if (note.details && note.details.is_important) {
            detailsElement.innerHTML += `<span class="font-bold text-blue-800">Важно: ДА</span>, Приоритет: ${note.details.priority_level}. `;
        }
        if (note.tags && note.tags.length > 0) {
             detailsElement.innerHTML += `Теги: ${note.tags.map(t => t.name).join(', ')}`;
        }
        
        const buttonContainer = document.createElement('div');
        buttonContainer.classList.add('flex', 'justify-end', 'gap-2', 'mt-4');

        const editBtn = document.createElement('button');
        editBtn.classList.add(
            'bg-yellow-500',
            'hover:bg-yellow-600',
            'text-white',
            'px-3',
            'py-1',
            'rounded-md',
            'text-sm',
            'font-medium',
            'transition',
            'duration-200'
        );
        editBtn.textContent = 'Изменить';
        editBtn.addEventListener('click', () => editNote(note.id, note.content));

        const deleteBtn = document.createElement('button');
        deleteBtn.classList.add(
            'bg-red-500',
            'hover:bg-red-600',
            'text-white',
            'px-3',
            'py-1',
            'rounded-md',
            'text-sm',
            'font-medium',
            'transition',
            'duration-200'
        );
        deleteBtn.textContent = 'Удалить';
        deleteBtn.addEventListener('click', () => deleteNote(note.id));

        buttonContainer.appendChild(editBtn);
        buttonContainer.appendChild(deleteBtn);

        noteElement.appendChild(noteTextElement);
        noteElement.appendChild(noteUserIdElement);
        noteElement.appendChild(detailsElement);
        noteElement.appendChild(noteDateElement);
        noteElement.appendChild(buttonContainer);

        notesContainer.appendChild(noteElement);
    });
}

async function addNote() {
    if (!authToken) {
        showModal('Внимание', 'Сначала выполните вход в систему, пожалуйста.');
        return;
    }
    const content = noteInput.value.trim();
    if (content === '') {
        showModal('Внимание', 'Кажется, вы забыли ввести текст заметки!');
        return;
    }

    try {
        const response = await fetch(API_NOTES_URL, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify({ content: content }),
        });
        if (!response.ok) {
            throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        noteInput.value = '';
        await loadNotes();
        showModal('Успех', 'Заметка успешно добавлена!');
    } catch (error) {
        console.error("Ошибка при добавлении заметки:", error);
        showModal('Ошибка', 'Ой! Не удалось добавить заметку. Возможно, ваш токен устарел или сервер недоступен.');
    }
}

async function deleteNote(id) {
    if (!authToken) return;

    const confirmed = await showModal('Подтверждение', 'Вы уверены? Заметка будет удалена безвозвратно!', true);
    if (!confirmed) return;

    try {
        const response = await fetch(`${API_NOTES_URL}${id}/`, {
            method: 'DELETE',
            headers: getAuthHeaders(),
        });
        if (response.status === 404) {
             throw new Error('Заметка не найдена или у вас нет прав на её удаление.');
        }
        if (!response.ok && response.status !== 204) { // 204 No Content - успешное удаление
            throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        await loadNotes();
        showModal('Успех', 'Заметка успешно удалена!');
    }
    catch (error) {
        console.error("Ошибка при удалении заметки:", error);
        showModal('Ошибка', `Не удалось удалить заметку. ${error.message}`);
    }
}

async function editNote(id, currentContent) {
    if (!authToken) return;

    const updatedContent = prompt('Измените свою заметку:', currentContent);

    if (updatedContent === null) return;
    if (updatedContent.trim() === '') {
        showModal('Внимание', 'Ой! Заметка не может быть пустой.');
        return;
    }

    try {
        const response = await fetch(`${API_NOTES_URL}${id}/`, {
            method: 'PUT',
            headers: getAuthHeaders(),
            body: JSON.stringify({ content: updatedContent.trim() }),
        });
        if (!response.ok) {
            throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        await loadNotes();
        showModal('Успех', 'Заметка успешно обновлена!');
    } catch (error) {
        console.error("Ошибка при обновлении заметки:", error);
        showModal('Ошибка', 'Не удалось обновить заметку. Возможно, у вас нет прав.');
    }
}

addNoteBtn.addEventListener('click', addNote);
noteInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        addNote();
    }
});

// Запуск аутентификации при загрузке страницы
window.onload = authenticateUser;
