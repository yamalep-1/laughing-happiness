const express = require('express');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

const pool = new Pool({
    user: 'your_db_user',
    host: 'localhost',
    database: 'notes_db',
    password: 'your_password',
    port: 5432,
});

(async () => {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS notes (
                id SERIAL PRIMARY KEY,
                user_id VARCHAR(255) NOT NULL,
                content TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT NOW()
            )
        `);
        console.log('Таблица notes проверена/создана успешно.');
    } catch (err) {
        console.error('Ошибка при создании таблицы notes:', err);
    }
})();

app.get('/api/notes', async (req, res) => {
    try {
        const result = await pool.query('SELECT id, user_id, content, created_at FROM notes ORDER BY created_at DESC');
        res.json(result.rows);
    } catch (err) {
        console.error('Ошибка при получении заметок:', err);
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/notes', async (req, res) => {
    const { userId, content } = req.body;
    
    if (!userId || !content || content.trim() === '') {
        return res.status(400).json({ error: 'UserId и содержимое заметки обязательны.' });
    }

    try {
        const result = await pool.query(
            'INSERT INTO notes (user_id, content) VALUES ($1, $2) RETURNING id, user_id, content, created_at',
            [userId, content.trim()]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        console.error('Ошибка при добавлении заметки:', err);
        res.status(500).json({ error: err.message });
    }
});

app.put('/api/notes/:id', async (req, res) => {
    const { id } = req.params;
    const { content } = req.body;
    
    if (!content || content.trim() === '') {
        return res.status(400).json({ error: 'Содержимое заметки не может быть пустым.' });
    }

    try {
        const result = await pool.query(
            'UPDATE notes SET content = $1, created_at = NOW() WHERE id = $2 RETURNING id, user_id, content, created_at',
            [content.trim(), id]
        );
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Заметка не найдена.' });
        }
        res.json(result.rows[0]);
    } catch (err) {
        console.error('Ошибка при обновлении заметки:', err);
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/notes/:id', async (req, res) => {
    const { id } = req.params;
    
    try {
        const result = await pool.query('DELETE FROM notes WHERE id = $1 RETURNING id', [id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Заметка не найдена.' });
        }
        res.status(204).send();
    } catch (err) {
        console.error('Ошибка при удалении заметки:', err);
        res.status(500).json({ error: err.message });
    }
});

app.listen(3000, () => console.log('Сервер заметок запущен на порту 3000'));
