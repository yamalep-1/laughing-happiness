import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, addDoc, doc, updateDoc, deleteDoc, onSnapshot, query, orderBy } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

const noteInput = document.getElementById('noteInput');
const addNoteBtn = document.getElementById('addNoteBtn');
const notesContainer = document.getElementById('notesContainer');
const userIdDisplay = document.getElementById('userIdDisplay').querySelector('span');

let app;
let db;
let auth;
let userId = 'loading...';

const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

async function initializeFirebase() {
    try {
        app = initializeApp(firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);

        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                userIdDisplay.textContent = userId;
                console.log("Пользователь вошел в систему. UID:", userId);
                setupNotesListener();
            } else {
                userIdDisplay.textContent = 'Анонимный вход...';
                console.log("Пользователь вышел из системы. Попытка анонимного входа.");
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                    console.log("Вход выполнен с кастомным токеном.");
                } else {
                    await signInAnonymously(auth);
                    console.log("Вход выполнен анонимно.");
                }
            }
        });

    } catch (error) {
        console.error("Ошибка инициализации Firebase или аутентификации:", error);
        notesContainer.innerHTML = '<p class="text-center text-red-500 py-4">Не удалось подключиться к базе данных. Пожалуйста, попробуйте позже.</p>';
    }
}

function setupNotesListener() {
    if (!db || !userId) {
        console.warn("Firestore или userId не готовы, слушатель заметок не может быть настроен.");
        return;
    }

    const userNotesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/notes`);

    const q = query(userNotesCollectionRef, orderBy("timestamp", "desc"));

    onSnapshot(q, (snapshot) => {
        const notes = [];
        snapshot.forEach((doc) => {
            notes.push({ id: doc.id, ...doc.data() });
        });
        renderNotes(notes);
        console.log("Заметки обновлены:", notes.length);
    }, (error) => {
        console.error("Ошибка при получении заметок в реальном времени:", error);
        notesContainer.innerHTML = '<p class="text-center text-red-500 py-4">Ошибка загрузки заметок. Пожалуйста, обновите страницу.</p>';
    });
}

function renderNotes(notes) {
    notesContainer.innerHTML = '';

    if (notes.length === 0) {
        notesContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Здесь пока тихо... Добавьте свою первую заметку!</p>';
        return;
    }

    notes.forEach(note => {
        const noteElement = document.createElement('div');
        noteElement.classList.add(
            'note-item',
            'bg-gray-50',
            'p-4',
            'rounded-lg',
            'shadow-sm',
            'flex',
            'flex-col',
            'border',
            'border-gray-200'
        );
        noteElement.dataset.id = note.id;

        const noteTextElement = document.createElement('p');
        noteTextElement.classList.add('note-text', 'text-gray-700', 'flex-grow', 'mb-3', 'cursor-pointer');
        noteTextElement.textContent = note.content;

        const noteDateElement = document.createElement('span');
        noteDateElement.classList.add('text-xs', 'text-gray-400', 'mt-2', 'text-right');
        noteDateElement.textContent = note.timestamp ? new Date(note.timestamp).toLocaleString() : 'Дата неизвестна';

        const buttonContainer = document.createElement('div');
        buttonContainer.classList.add('flex', 'justify-end', 'gap-2', 'mt-4');

        const editBtn = document.createElement('button');
        editBtn.classList.add(
            'bg-yellow-500',
            'hover:bg-yellow-600',
            'text-white',
            'px-3',
            'py-1',
            'rounded-md',
            'text-sm',
            'font-medium',
            'transition',
            'duration-200'
        );
        editBtn.textContent = 'Изменить';
        editBtn.addEventListener('click', () => editNote(note.id, note.content));

        const deleteBtn = document.createElement('button');
        deleteBtn.classList.add(
            'bg-red-500',
            'hover:bg-red-600',
            'text-white',
            'px-3',
            'py-1',
            'rounded-md',
            'text-sm',
            'font-medium',
            'transition',
            'duration-200'
        );
        deleteBtn.textContent = 'Удалить';
        deleteBtn.addEventListener('click', () => deleteNote(note.id));

        buttonContainer.appendChild(editBtn);
        buttonContainer.appendChild(deleteBtn);

        noteElement.appendChild(noteTextElement);
        noteElement.appendChild(noteDateElement);
        noteElement.appendChild(buttonContainer);

        notesContainer.appendChild(noteElement);
    });
}

async function addNote() {
    const content = noteInput.value.trim();
    if (content === '') {
        alert('Кажется, вы забыли ввести текст заметки! Пожалуйста, напишите что-нибудь.');
        return;
    }

    if (!db || !userId) {
        alert('База данных не готова. Пожалуйста, подождите или обновите страницу.');
        return;
    }

    try {
        await addDoc(collection(db, `artifacts/${appId}/users/${userId}/notes`), {
            content: content,
            timestamp: new Date().toISOString()
        });
        noteInput.value = '';
        console.log("Заметка успешно добавлена.");
    } catch (e) {
        console.error("Ошибка при добавлении заметки:", e);
        alert("Ой! Не удалось добавить заметку. Пожалуйста, попробуйте снова.");
    }
}

async function deleteNote(id) {
    if (!confirm('Вы уверены? Заметка будет удалена безвозвратно!')) {
        return;
    }

    if (!db || !userId) {
        alert('База данных не готова. Пожалуйста, подождите или обновите страницу.');
        return;
    }

    try {
        await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/notes`, id));
        console.log("Заметка успешно удалена.");
    } catch (e) {
        console.error("Ошибка при удалении заметки:", e);
        alert("Ой! Не удалось удалить заметку. Пожалуйста, попробуйте снова.");
    }
}

async function editNote(id, currentContent) {
    const updatedContent = prompt('Измените свою заметку:', currentContent);

    if (updatedContent === null) {
        return;
    }
    if (updatedContent.trim() === '') {
        alert('Ой! Заметка не может быть пустой. Пожалуйста, введите текст.');
        return;
    }

    if (!db || !userId) {
        alert('База данных не готова. Пожалуйста, подождите или обновите страницу.');
        return;
    }

    try {
        await updateDoc(doc(db, `artifacts/${appId}/users/${userId}/notes`, id), {
            content: updatedContent.trim(),
            timestamp: new Date().toISOString()
        });
        console.log("Заметка успешно обновлена.");
    } catch (e) {
        console.error("Ошибка при обновлении заметки:", e);
        alert("Ой! Не удалось обновить заметку. Пожалуйста, попробуйте снова.");
    }
}

addNoteBtn.addEventListener('click', addNote);
noteInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        addNote();
    }
});

window.onload = initializeFirebase;
